import serial
import requests
import time

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ UART
ser = serial.Serial('/dev/serial0', 9600, timeout=1)
server_url = "http://192.168.1.100:5050/receive_data"  # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò –ù–ê IP –°–ï–†–í–ï–†–ê!

def read_arduino():
    try:
        line = ser.readline().decode('utf-8').strip()  # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        if line:
            values = line.split(",")  # –†–∞–∑–±–∏–≤–∞–µ–º CSV
            if len(values) == 8:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å **—Ä–æ–≤–Ω–æ 8 –∑–Ω–∞—á–µ–Ω–∏–π**
                try:
                    data = {
                        "soilValue": int(values[0]),       # –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã
                        "mq3Analog": int(values[1]),       # –ì–∞–∑ MQ-3 (–∞–Ω–∞–ª–æ–≥)
                        "mq3Digital": int(values[2]),      # –ì–∞–∑ MQ-3 (—Ü–∏—Ñ—Ä–æ–≤–æ–π)
                        "dhtTemperature": float(values[3]),  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ DHT11
                        "dhtHumidity": float(values[4]),     # –í–ª–∞–∂–Ω–æ—Å—Ç—å DHT11
                        "bmpTemperature": float(values[5]),  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ BMP180
                        "pressure": float(values[6]),        # –î–∞–≤–ª–µ–Ω–∏–µ BMP180
                        "altitude": float(values[7])         # –í—ã—Å–æ—Ç–∞ BMP180
                    }
                    return data
                except ValueError:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {line}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino (–Ω–µ 8 –∑–Ω–∞—á–µ–Ω–∏–π): {line}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ UART: {e}")
        return None

while True:
    data = read_arduino()
    if data:
        print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {data}")
        try:
            response = requests.post(server_url, json=data)
            print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}, {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")
    time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
